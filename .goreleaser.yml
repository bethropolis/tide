# .goreleaser.yml
# Configuration for GoReleaser. See https://goreleaser.com/intro/ for documentation.

# Project name (should match your binary name)
project_name: tide

# Runs before the build process
before:
  hooks:
    # Ensure dependencies are tidy
    - go mod tidy
    # You could add go generate or other pre-build steps here
    # - go generate ./...

# Build configuration
builds:
  - # Main build configuration
    id: tide-build # Optional ID for the build
    # Path to main package
    main: ./cmd/tide # Adjust this path if your main.go is elsewhere
    # Environment variables for the build
    env:
      - CGO_ENABLED=0 # Disable CGO for easier cross-compilation unless required
    # Target platforms (matches your original xgo targets)
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
    # Ignore builds that aren't needed for certain packages (optional)
    ignore:
      - goos: darwin
        goarch: arm64 # Example: If you don't need darwin/arm64 packages
      - goos: windows
        goarch: arm64 # Example: If you don't need windows/arm64 packages
    # Inject version information using ldflags (GoReleaser provides template variables)
    ldflags:
      - -s -w -X main.Version={{.Version}} -X main.Commit={{.Commit}} -X main.BuildDate={{.Date}} -X main.BuiltBy=goreleaser
    # Binary name template (optional, defaults to project_name)
    binary: "{{ .ProjectName }}"

# Archive configuration (for .tar.gz and .zip files)
archives:
  - # Default archive settings
    id: tide-archives
    # Name template for archives
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    # Automatically override format to zip for windows
    format_overrides:
      - goos: windows
        format: zip
    # Files to include in the archive relative to the project root
    files:
      - README.md
      - LICENSE # Make sure you have a LICENSE file

# NFPM configuration (for DEB and RPM packages)
nfpms:
  - # Configuration for creating DEB and RPM packages
    id: tide-packages
    package_name: tide # Name used by apt/dnf/yum
    # NFPM version (v2 is recommended)
    nfpm_version: 2

    # --- Required metadata ---
    vendor: "Your Company or Name" # Replace with your info
    homepage: "https://github.com/your-username/your-repo" # Replace with your project URL
    maintainer: "Your Name <your.email@example.com>" # Replace with your contact info
    description: "A brief description of your 'tide' application." # Replace with your description
    license: "Specify License (e.g., MIT, Apache-2.0)" # Replace, should match LICENSE file

    # Formats to generate
    formats:
      - deb
      - rpm

    # Target architectures (maps Go arch to package arch)
    # You might need to adjust these based on nfpm specifics if needed
    archs:
      - amd64
      - arm64

    # Files to include in the package and their destinations
    contents:
      # Install the binary to /usr/bin
      - src: "{{ .Path }}" # Path to the built binary (provided by GoReleaser)
        dst: "/usr/bin/{{ .ProjectName }}" # Destination path
        file_info:
          mode: 0755 # Ensure it's executable

      # --- Optional files (Uncomment and provide paths if you have them) ---
      # # Desktop entry file for application menus
      # - src: ./packaging/linux/tide.desktop # Path to your .desktop file
      #   dst: /usr/share/applications/tide.desktop
      #   file_info:
      #     mode: 0644

      # # Icon file
      # - src: ./packaging/linux/tide.png # Path to your icon (e.g., 256x256 png)
      #   dst: /usr/share/icons/hicolor/256x256/apps/tide.png
      #   file_info:
      #     mode: 0644

    # Package dependencies (optional)
    # dependencies:
    #   deb: # Dependencies specific to deb packages
    #     - libc6
    #   rpm: # Dependencies specific to rpm packages
    #     - glibc

# AppImage configuration
appimage:
  # Enable AppImage generation
  enabled: true
  # Optional: Specify the path to the AppRun script if needed
  # apprun: "./path/to/AppRun"
  # Optional: Specify dependencies to bundle using linuxdeploy plugins
  # linuxdeploy:
  #   # Example: Bundle GTK libraries if it's a GUI app
  #   - gtk
  # Optional: Provide a desktop file and icon for AppImage metadata
  # desktop: ./packaging/linux/tide.desktop
  # icon: ./packaging/linux/tide.png

# Generate checksums for artifacts
checksum:
  name_template: 'checksums.txt'
  algorithm: sha256

# Snapshot configuration (for builds from main/master branch)
snapshot:
  name_template: "{{ incpatch .Version }}-next"

# Changelog generation configuration
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - Merge pull request
      - Merge branch

# GitHub Release configuration
release:
  draft: false
  # Prerelease flag (can be 'auto' based on tag, true, or false)
  prerelease: auto
  # Name template for the release title
  name_template: "Release {{.Tag}}"

