# .github/workflows/dev.yml
name: Development Build

# Trigger workflow only on pushes to the 'dev' branch
on:
  push:
    branches:
      - dev
    # Also trigger specifically on tag pushes if you want tags pushed directly to trigger a release
    tags:
      - 'v*.*.*' # Optional: if you want pushing tags directly to trigger a release via this workflow

# Permissions needed for GoReleaser to create releases (when tagged)
permissions:
  contents: write

jobs:
  # Job to build development artifacts or releases using GoReleaser
  build_dev_or_release:
    name: Build Dev Artifacts or Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # GoReleaser needs the full history to generate changelogs/snapshot names correctly
          fetch-depth: 0
          fetch-tags: true # Ensure tags are fetched

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21' # Use a version compatible with your project and GoReleaser

      # Install cross-compilers for CGO support
      - name: Install cross compilers for CGO
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            gcc-mingw-w64-x86-64
        shell: bash

      # Optional: Cache Go modules to speed up builds
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Set environment variables for cross-compilation with CGO
      - name: Setup Cross-Compilation Environment
        run: |
          echo "PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
        shell: bash

      # Run GoReleaser with appropriate settings for each target platform
      - name: Run GoReleaser (Release on Tag)
        # Run only if the ref triggering the workflow is a tag
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # These variables are picked up by goreleaser
          CC_FOR_TARGET_linux_arm64: aarch64-linux-gnu-gcc
          CC_FOR_linux_arm64: aarch64-linux-gnu-gcc
          CC_FOR_TARGET_windows_amd64: x86_64-w64-mingw32-gcc
          CC_FOR_windows_amd64: x86_64-w64-mingw32-gcc

      - name: Run GoReleaser (Build Only - No Tag)
        # Run only if the ref triggering the workflow is NOT a tag (i.e., a branch push)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: build --snapshot --clean --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # We're only building for the host platform in dev builds to avoid cross-compilation issues
          # This makes the dev build faster and more reliable

      - name: Upload Build Artifacts (No Tag)
        # Run only if the ref triggering the workflow is NOT a tag
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          # Name the artifact uniquely, e.g., using the commit SHA
          name: tide-dev-build-${{ github.sha }}
          # Upload the contents of the 'dist' directory where goreleaser build puts artifacts
          path: dist/
          if-no-files-found: error # Error if the dist directory is empty