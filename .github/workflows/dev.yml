name: Release Go Binaries

# Trigger workflow on tag push or manual dispatch
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        default: 'manual-release'
      release_name:
        description: 'Name of the release'
        required: false
        default: 'Manual Release'

permissions:
    contents: write  # Required for creating releases

jobs:
    build:
        name: Build Binaries
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                    go-version: '>=1.23.7'

            - name: Create directories
              run: mkdir -p ./dist/package
              shell: bash

            - name: Setup xgo
              uses: crazy-max/ghaction-xgo@v3
              with:
                xgo_version: latest
                go_version: 1.21
                dest: dist
                prefix: tide
                targets: windows/amd64,linux/amd64,linux/arm64,darwin/amd64,darwin/arm64
                v: true
                x: false
                race: false
                ldflags: -s -w
                buildmode: default
                trimpath: true

            - name: Create Archives
              run: |
                BINARY_NAME="tide"
                REF_NAME="${GITHUB_REF_NAME:-latest}"
                
                echo "Files in dist directory:"
                ls -la ./dist/
                
                # Process each binary output by xgo
                for BINARY_PATH in ./dist/tide-*; do
                  # Extract platform info from filename
                  FILENAME=$(basename "$BINARY_PATH")
                  
                  # Skip if not a file
                  [ ! -f "$BINARY_PATH" ] && continue
                  
                  # Parse OS/ARCH from filename pattern tide-{os}-{arch}[.exe]
                  if [[ "$FILENAME" == *windows* ]]; then
                    OS="windows"
                    ARCH=$(echo "$FILENAME" | sed -E 's/tide-windows-([^.]+)\.exe/\1/')
                    EXT=".zip"
                    BINARY_FILE="${BINARY_NAME}.exe"
                  else
                    OS=$(echo "$FILENAME" | cut -d'-' -f2)
                    ARCH=$(echo "$FILENAME" | cut -d'-' -f3)
                    EXT=".tar.gz"
                    BINARY_FILE="$BINARY_NAME"
                  fi
                  
                  ARCHIVE_NAME="${BINARY_NAME}-${REF_NAME}-${OS}-${ARCH}${EXT}"
                  
                  echo "Processing: $FILENAME for $OS-$ARCH â†’ $ARCHIVE_NAME"
                  
                  # Clear and prepare package directory
                  rm -rf ./dist/package/*
                  cp "$BINARY_PATH" "./dist/package/$BINARY_FILE"
                  cp README.md ./dist/package/ || echo "Warning: README.md not found"
                  
                  # Create archive based on OS
                  if [[ "$OS" == "windows" ]]; then
                    7z a "./dist/$ARCHIVE_NAME" "./dist/package/*"
                  else
                    tar -czvf "./dist/$ARCHIVE_NAME" -C ./dist/package .
                  fi
                  
                  # Add to artifacts list
                  echo "$ARCHIVE_NAME" >> ./dist/artifacts_list.txt
                done
                
                echo "Created archives:"
                ls -la ./dist/*.zip ./dist/*.tar.gz 2>/dev/null || echo "No archives found"
              shell: bash

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: tide-binaries
                path: |
                  ./dist/*.tar.gz
                  ./dist/*.zip
                if-no-files-found: warn

