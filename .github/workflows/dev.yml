# .github/workflows/dev.yml
name: Development Build

# Trigger workflow only on pushes to the 'dev' branch
on:
  push:
    branches:
      - dev
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  # Build job for Linux and Windows targets
  build_linux_windows:
    name: Build Linux and Windows
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Install cross-compilers for CGO support
      - name: Install cross compilers for CGO
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            gcc \
            gcc-aarch64-linux-gnu \
            libc6-dev-arm64-cross \
            gcc-mingw-w64-x86-64
        shell: bash

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Set environment variables
      - name: Setup environment
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
        shell: bash

      - name: Set build date
        id: build_date
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT
        shell: bash

      # Run GoReleaser based on event type
      - name: Run GoReleaser (Release on tag)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v1.35.2  # Ensure we use a version that supports --only flag
          args: release --clean --only=linux-amd64,linux-arm64,windows-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Cross-compiler environment variables
          CGO_ENABLED: 1

      - name: Run GoReleaser (Build only - no tag)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v1.35.2  # Ensure we use a version that supports --only flag
          args: build --snapshot --clean --only=linux-amd64,linux-arm64,windows-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1

      - name: Upload Linux/Windows Artifacts
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: tide-linux-windows-${{ github.sha }}
          path: dist/
          if-no-files-found: error

  # Build job for macOS targets (requires macOS runner)
  build_macos:
    name: Build macOS
    runs-on: macos-latest
    # Only run on tags or manually triggered builds to save on macOS minutes
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.21'

      # Cache Go modules
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Set environment variables
      - name: Setup environment
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
        shell: bash

      # Run GoReleaser for macOS only
      - name: Run GoReleaser (macOS only)
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v1.35.2  # Ensure we use a version that supports --only flag
          args: ${{ startsWith(github.ref, 'refs/tags/') && 'release --clean --only=darwin-amd64,darwin-arm64' || 'build --snapshot --clean --only=darwin-amd64,darwin-arm64' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 1

      - name: Upload macOS Artifacts
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: tide-macos-${{ github.sha }}
          path: dist/
          if-no-files-found: error

  # Combine artifacts if needed (for non-tag builds)
  combine_artifacts:
    name: Combine Artifacts
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/tags/') && github.event_name == 'workflow_dispatch' }}
    needs: [build_linux_windows, build_macos]
    
    steps:
      - name: Download Linux/Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: tide-linux-windows-${{ github.sha }}
          path: dist

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: tide-macos-${{ github.sha }}
          path: dist

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tide-all-platforms-${{ github.sha }}
          path: dist/
          if-no-files-found: error