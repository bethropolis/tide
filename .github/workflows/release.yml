name: Release Go Binaries

# Trigger workflow on tag push, PR, or manual dispatch
on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*" # Updated to match versioning pattern
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write # Required for creating releases and tags

jobs:
  # Build job for Linux and Windows targets
  build_linux_windows:
    name: Build Linux and Windows
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Cache cross-compiler installations
      - name: Cache cross-compilers
        id: cache-cross-compilers
        uses: actions/cache@v4
        with:
          path: |
            ~/.apt-cross-toolchains
          key: ${{ runner.os }}-cross-compilers-v1-${{ hashFiles('scripts/setup.sh') }}

      # Install cross-compilers using setup script only if cache missed
      - name: Install cross compilers for CGO
        if: steps.cache-cross-compilers.outputs.cache-hit != 'true'
        run: |
          bash ./scripts/setup.sh
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.21"
          check-latest: true

      # Cache Go modules - moved after Go is set up but before any go commands
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Download dependencies first (separate step to ensure they're downloaded before cache is used)
      - name: Download Go modules
        run: go mod download
        shell: bash

      # Set environment variables
      - name: Setup environment
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV

          # Set path for cross compilers if needed
          echo "PATH=$PATH:/usr/aarch64-linux-gnu/bin:/usr/x86_64-w64-mingw32/bin" >> $GITHUB_ENV
        shell: bash

      - name: Set build date
        id: build_date
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_OUTPUT
        shell: bash

      # Run GoReleaser based on event type
      - name: Run GoReleaser (Release on tag)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: goreleaser/goreleaser-action@v5
        with:
          version: "~> v2" # Ensure we use a version that supports --only flag
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Cross-compiler environment variables
          CGO_ENABLED: 1
