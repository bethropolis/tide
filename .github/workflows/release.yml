name: Release Go Binaries

# Trigger workflow on tag push or manual dispatch
on:
    push:
        # tags:
        #     - 'v*'
    workflow_dispatch:
        inputs:
            tag_name:
                description: 'Tag name for the release (e.g., v1.0.0)'
                required: true
                default: 'manual-release'
            release_name:
                description: 'Name of the release'
                required: false
                default: 'Manual Release'

permissions:
    contents: write  # Required for creating releases

jobs:
    build:
        name: Build Binaries
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                    go-version: '>=1.23.7'

            - name: Create directories
              run: mkdir -p ./dist/package
              shell: bash

            - name: Setup xgo
              uses: crazy-max/ghaction-xgo@v3
              with:
                xgo_version: latest
                go_version: 1.21
                dest: dist
                prefix: tide
                targets: windows/amd64,linux/amd64,linux/arm64,darwin/amd64,darwin/arm64
                v: true
                x: false
                race: false
                ldflags: -s -w
                buildmode: default
                trimpath: true

            - name: Create Archives
              run: |
                BINARY_NAME="tide"
                REF_NAME="${GITHUB_REF_NAME:-latest}"
                
                echo "Files in dist directory:"
                ls -la ./dist/
                
                # Process each binary output by xgo
                for BINARY_PATH in ./dist/tide-*; do
                  # Extract platform info from filename
                  FILENAME=$(basename "$BINARY_PATH")
                  
                  # Skip if not a file
                  [ ! -f "$BINARY_PATH" ] && continue
                  
                  # Parse OS/ARCH from filename pattern tide-{os}-{arch}[.exe]
                  if [[ "$FILENAME" == *windows* ]]; then
                    OS="windows"
                    ARCH=$(echo "$FILENAME" | sed -E 's/tide-windows-([^.]+)\.exe/\1/')
                    EXT=".zip"
                    BINARY_FILE="${BINARY_NAME}.exe"
                  else
                    OS=$(echo "$FILENAME" | cut -d'-' -f2)
                    ARCH=$(echo "$FILENAME" | cut -d'-' -f3)
                    EXT=".tar.gz"
                    BINARY_FILE="$BINARY_NAME"
                  fi
                  
                  ARCHIVE_NAME="${BINARY_NAME}-${REF_NAME}-${OS}-${ARCH}${EXT}"
                  
                  echo "Processing: $FILENAME for $OS-$ARCH â†’ $ARCHIVE_NAME"
                  
                  # Clear and prepare package directory
                  rm -rf ./dist/package/*
                  cp "$BINARY_PATH" "./dist/package/$BINARY_FILE"
                  cp README.md ./dist/package/ || echo "Warning: README.md not found"
                  
                  # Create archive based on OS
                  if [[ "$OS" == "windows" ]]; then
                    7z a "./dist/$ARCHIVE_NAME" "./dist/package/*"
                  else
                    tar -czvf "./dist/$ARCHIVE_NAME" -C ./dist/package .
                  fi
                  
                  # Add to artifacts list
                  echo "$ARCHIVE_NAME" >> ./dist/artifacts_list.txt
                done
                
                echo "Created archives:"
                ls -la ./dist/*.zip ./dist/*.tar.gz 2>/dev/null || echo "No archives found"
              shell: bash

            - name: Upload Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: tide-binaries
                path: |
                  ./dist/*.tar.gz
                  ./dist/*.zip
                if-no-files-found: warn

    # release:
    #     name: Create Release
    #     needs: build  # Wait for build job to complete
    #     runs-on: ubuntu-latest
    #     permissions:
    #         contents: write  # Required for release creation

    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v4
                
    #         - name: Download Artifacts
    #           uses: actions/download-artifact@v4
    #           with:
    #             path: ./artifacts

    #         - name: Process Artifacts for Release
    #           run: |
    #             # First look at the directory structure
    #             echo "Initial directory structure:"
    #             find ./artifacts -type f | sort
                
    #             # Create a directory for processed files
    #             mkdir -p ./release-files
                
    #             # Find and move all artifact files to the release directory
    #             find ./artifacts -type f -name "*.tar.gz" -o -name "*.zip" | while read file; do
    #                 cp "$file" ./release-files/
    #             done
                
    #             # Generate checksums for the files in release directory
    #             cd ./release-files
    #             echo "Files to be released:"
    #             ls -la
                
    #             # Generate SHA256 checksums for all artifacts
    #             sha256sum * > checksums.txt
    #             cat checksums.txt
    #           shell: bash

    #         - name: Set release info
    #           id: release_info
    #           run: |
    #             # Set tag name - use input value if manually triggered, otherwise use git ref
    #             if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
    #                 echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
    #                 echo "RELEASE_NAME=${{ github.event.inputs.release_name }}" >> $GITHUB_OUTPUT
    #                 echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
    #             else
    #                 echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
    #                 echo "RELEASE_NAME=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
    #                 echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT
    #             fi
    #           shell: bash

    #         - name: Create GitHub Release
    #           uses: softprops/action-gh-release@v2
    #           with:
    #             name: ${{ steps.release_info.outputs.RELEASE_NAME }}
    #             tag_name: ${{ steps.release_info.outputs.TAG_NAME }}
    #             generate_release_notes: true
    #             make_latest: true
    #             prerelease: ${{ steps.release_info.outputs.IS_PRERELEASE }}
    #             files: |
    #                 ./release-files/*
    #           env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}