name: Release Go Binaries

# Trigger workflow on tag push or manual dispatch
on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v0.1.0 etc.
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        default: 'manual-release'
      release_name:
        description: 'Name of the release'
        required: false
        # Default uses the tag name or 'Manual Release'
        # default: ${{ github.event_name == 'push' && github.ref_name || format('Manual Release {0}', inputs.tag_name) }}

permissions:
    contents: write  # Required for creating releases

jobs:
    build:
        name: Build Binaries
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                fetch-depth: 0 # Fetches all history for accurate commit info if needed

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                    go-version: '>=1.21' # Match your project requirement

            - name: Create directories
              run: mkdir -p ./dist/package
              shell: bash

            # --- Build with xgo and ldflags ---
            - name: Setup xgo for Cross-Compilation
              uses: crazy-max/ghaction-xgo@v3
              with:
                xgo_version: latest
                go_version: 1.21 # Keep consistent with setup-go if possible
                dest: dist
                prefix: tide # Output binary prefix
                pkg: ./cmd/tide # Specify the main package path
                targets: windows/amd64,linux/amd64,linux/arm64,darwin/amd64,darwin/arm64
                v: true
                x: false
                race: false
                # Inject version info via ldflags - ensure 'main.' path is correct
                ldflags: > # Use > for multi-line string
                  -s -w
                  -X 'main.Version=${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag_name }}'
                  -X 'main.Commit=${{ github.sha }}'
                  -X 'main.BuildDate=$(date -u +'%Y-%m-%dT%H:%M:%SZ')'
                buildmode: default
                trimpath: true

            # --- Archive Binaries ---
            - name: Create Archives
              run: |
                BINARY_NAME="tide"
                # Determine version directly from GitHub context
                VERSION_TAG="${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag_name }}"

                echo "Files in dist directory:"
                ls -la ./dist/

                # Process each binary output by xgo
                for BINARY_PATH in ./dist/tide-*; do 
                  FILENAME=$(basename "$BINARY_PATH")
                  [ ! -f "$BINARY_PATH" ] && continue # Skip if not a file

                  # Parse OS/ARCH (keep existing logic)
                  if [[ "$FILENAME" == *windows* ]]; then
                    OS="windows"
                    ARCH=$(echo "$FILENAME" | sed -E 's/tide-windows-([^.]+)\.exe/\1/')
                    EXT=".zip"
                    BINARY_FILE="${BINARY_NAME}.exe"
                  else
                    OS=$(echo "$FILENAME" | cut -d'-' -f2)
                    ARCH=$(echo "$FILENAME" | cut -d'-' -f3)
                    EXT=".tar.gz"
                    BINARY_FILE="$BINARY_NAME"
                  fi

                  # Use VERSION_TAG in archive name
                  ARCHIVE_NAME="${BINARY_NAME}-${VERSION_TAG}-${OS}-${ARCH}${EXT}"

                  echo "Processing: $FILENAME for $OS-$ARCH â†’ $ARCHIVE_NAME"

                  rm -rf ./dist/package/* # Clear package dir
                  cp "$BINARY_PATH" "./dist/package/$BINARY_FILE"
                  cp README.md ./dist/package/ || echo "Warning: README.md not found"
                  cp LICENSE ./dist/package/ || echo "Warning: LICENSE not found" # Add LICENSE

                  # Create archive
                  if [[ "$OS" == "windows" ]]; then
                    7z a "./dist/$ARCHIVE_NAME" "./dist/package/*"
                  else
                    tar -czvf "./dist/$ARCHIVE_NAME" -C ./dist/package .
                  fi
                done

                echo "Created archives:"
                ls -la ./dist/*.zip ./dist/*.tar.gz 2>/dev/null || echo "No archives found"
              shell: bash

            - name: Upload Artifacts (for testing/interim use)
              uses: actions/upload-artifact@v4
              with:
                name: tide-binaries-${{ github.event_name == 'push' && github.ref_name || github.event.inputs.tag_name }} # Include version in artifact name
                path: |
                  ./dist/*.tar.gz
                  ./dist/*.zip
                if-no-files-found: error # Fail if no archives created

            # --- Create GitHub Release (Optional but Recommended) ---
            # This step runs only on tag pushes, not manual dispatch by default
            - name: Create Release
              if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
              uses: softprops/action-gh-release@v1
              with:
                tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow
                name: Release ${{ github.ref_name }} # Release name based on tag
                # body_path: ./CHANGELOG.md # Optional: Path to release notes
                draft: false # Set to true to create draft releases
                prerelease: false # Set to true if it's a pre-release
                files: | # Upload the created archives
                  ./dist/*.tar.gz
                  ./dist/*.zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the default token